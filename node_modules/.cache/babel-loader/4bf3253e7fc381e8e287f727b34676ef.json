{"ast":null,"code":"import getCurrenciesFromApi from '../../helpers/currenciesAPI';\nexport const ADD_LOGIN_INFO = 'ADD_LOGIN_INFO';\nexport const RECEIVE_EXPENSE = 'RECEIVE_EXPENSE';\nexport const REQUEST_CURRENCY = 'REQUEST_CURRENCY';\nexport const RECEIVE_CURRENCY = 'RECEIVE_CURRENCY';\nexport const RECEIVE_CURRENCY_FAILURE = 'RECEIVE_CURRENCY_FAILURE';\nexport const RECEIVE_CURRENCY_FULL = 'RECEIVE_CURRENCY_FULL';\n\nconst requestCurrency = () => ({\n  type: REQUEST_CURRENCY\n});\n\nconst receiveCurrency = currencies => ({\n  type: RECEIVE_CURRENCY,\n  currencies: Object.keys(currencies).filter(key => key !== 'USDT')\n});\n\nconst receiveCurrencyFull = currencies => ({\n  type: RECEIVE_CURRENCY_FULL,\n  expenses: currencies\n});\n\nconst receiveCurrencyFailure = errorMessage => ({\n  type: RECEIVE_CURRENCY_FAILURE,\n  error: errorMessage\n});\n\nexport const fetchCurrencies = () => async dispacth => {\n  dispacth(requestCurrency());\n\n  try {\n    const response = await getCurrenciesFromApi();\n    const sucessAction = receiveCurrency(response);\n    dispacth(sucessAction);\n  } catch (error) {\n    const failureAction = receiveCurrencyFailure(error);\n    dispacth(failureAction);\n  }\n};\nexport function login(payload) {\n  return {\n    type: ADD_LOGIN_INFO,\n    payload\n  };\n}\nexport const submitExpense = payload => async dispacth => {\n  dispacth(requestCurrency());\n\n  try {\n    const response = await getCurrenciesFromApi();\n    const sucessAction = receiveCurrencyFull(response);\n    dispacth(sucessAction);\n    return {\n      type: RECEIVE_EXPENSE,\n      payload\n    };\n  } catch (error) {\n    const failureAction = receiveCurrencyFailure(error);\n    dispacth(failureAction);\n  }\n};","map":{"version":3,"names":["getCurrenciesFromApi","ADD_LOGIN_INFO","RECEIVE_EXPENSE","REQUEST_CURRENCY","RECEIVE_CURRENCY","RECEIVE_CURRENCY_FAILURE","RECEIVE_CURRENCY_FULL","requestCurrency","type","receiveCurrency","currencies","Object","keys","filter","key","receiveCurrencyFull","expenses","receiveCurrencyFailure","errorMessage","error","fetchCurrencies","dispacth","response","sucessAction","failureAction","login","payload","submitExpense"],"sources":["/home/almir/Documentos/Projects/15.6_trybewallet/sd-023-a-project-trybewallet/src/redux/actions/index.js"],"sourcesContent":["import getCurrenciesFromApi from '../../helpers/currenciesAPI';\n\nexport const ADD_LOGIN_INFO = 'ADD_LOGIN_INFO';\nexport const RECEIVE_EXPENSE = 'RECEIVE_EXPENSE';\nexport const REQUEST_CURRENCY = 'REQUEST_CURRENCY';\nexport const RECEIVE_CURRENCY = 'RECEIVE_CURRENCY';\nexport const RECEIVE_CURRENCY_FAILURE = 'RECEIVE_CURRENCY_FAILURE';\nexport const RECEIVE_CURRENCY_FULL = 'RECEIVE_CURRENCY_FULL';\n\nconst requestCurrency = () => ({\n  type: REQUEST_CURRENCY,\n});\n\nconst receiveCurrency = (currencies) => ({\n  type: RECEIVE_CURRENCY,\n  currencies: Object.keys(currencies).filter((key) => key !== 'USDT'),\n});\n\nconst receiveCurrencyFull = (currencies) => ({\n  type: RECEIVE_CURRENCY_FULL,\n  expenses: currencies,\n});\n\nconst receiveCurrencyFailure = (errorMessage) => ({\n  type: RECEIVE_CURRENCY_FAILURE,\n  error: errorMessage,\n});\n\nexport const fetchCurrencies = () => async (dispacth) => {\n  dispacth(requestCurrency());\n  try {\n    const response = await getCurrenciesFromApi();\n    const sucessAction = receiveCurrency(response);\n    dispacth(sucessAction);\n  } catch (error) {\n    const failureAction = receiveCurrencyFailure(error);\n    dispacth(failureAction);\n  }\n};\n\nexport function login(payload) {\n  return {\n    type: ADD_LOGIN_INFO,\n    payload,\n  };\n}\n\nexport const submitExpense = (payload) => async (dispacth) => {\n  dispacth(requestCurrency());\n  try {\n    const response = await getCurrenciesFromApi();\n    const sucessAction = receiveCurrencyFull(response);\n    dispacth(sucessAction);\n    return {\n      type: RECEIVE_EXPENSE,\n      payload,\n    };\n  } catch (error) {\n    const failureAction = receiveCurrencyFailure(error);\n    dispacth(failureAction);\n  }\n};\n"],"mappings":"AAAA,OAAOA,oBAAP,MAAiC,6BAAjC;AAEA,OAAO,MAAMC,cAAc,GAAG,gBAAvB;AACP,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,wBAAwB,GAAG,0BAAjC;AACP,OAAO,MAAMC,qBAAqB,GAAG,uBAA9B;;AAEP,MAAMC,eAAe,GAAG,OAAO;EAC7BC,IAAI,EAAEL;AADuB,CAAP,CAAxB;;AAIA,MAAMM,eAAe,GAAIC,UAAD,KAAiB;EACvCF,IAAI,EAAEJ,gBADiC;EAEvCM,UAAU,EAAEC,MAAM,CAACC,IAAP,CAAYF,UAAZ,EAAwBG,MAAxB,CAAgCC,GAAD,IAASA,GAAG,KAAK,MAAhD;AAF2B,CAAjB,CAAxB;;AAKA,MAAMC,mBAAmB,GAAIL,UAAD,KAAiB;EAC3CF,IAAI,EAAEF,qBADqC;EAE3CU,QAAQ,EAAEN;AAFiC,CAAjB,CAA5B;;AAKA,MAAMO,sBAAsB,GAAIC,YAAD,KAAmB;EAChDV,IAAI,EAAEH,wBAD0C;EAEhDc,KAAK,EAAED;AAFyC,CAAnB,CAA/B;;AAKA,OAAO,MAAME,eAAe,GAAG,MAAM,MAAOC,QAAP,IAAoB;EACvDA,QAAQ,CAACd,eAAe,EAAhB,CAAR;;EACA,IAAI;IACF,MAAMe,QAAQ,GAAG,MAAMtB,oBAAoB,EAA3C;IACA,MAAMuB,YAAY,GAAGd,eAAe,CAACa,QAAD,CAApC;IACAD,QAAQ,CAACE,YAAD,CAAR;EACD,CAJD,CAIE,OAAOJ,KAAP,EAAc;IACd,MAAMK,aAAa,GAAGP,sBAAsB,CAACE,KAAD,CAA5C;IACAE,QAAQ,CAACG,aAAD,CAAR;EACD;AACF,CAVM;AAYP,OAAO,SAASC,KAAT,CAAeC,OAAf,EAAwB;EAC7B,OAAO;IACLlB,IAAI,EAAEP,cADD;IAELyB;EAFK,CAAP;AAID;AAED,OAAO,MAAMC,aAAa,GAAID,OAAD,IAAa,MAAOL,QAAP,IAAoB;EAC5DA,QAAQ,CAACd,eAAe,EAAhB,CAAR;;EACA,IAAI;IACF,MAAMe,QAAQ,GAAG,MAAMtB,oBAAoB,EAA3C;IACA,MAAMuB,YAAY,GAAGR,mBAAmB,CAACO,QAAD,CAAxC;IACAD,QAAQ,CAACE,YAAD,CAAR;IACA,OAAO;MACLf,IAAI,EAAEN,eADD;MAELwB;IAFK,CAAP;EAID,CARD,CAQE,OAAOP,KAAP,EAAc;IACd,MAAMK,aAAa,GAAGP,sBAAsB,CAACE,KAAD,CAA5C;IACAE,QAAQ,CAACG,aAAD,CAAR;EACD;AACF,CAdM"},"metadata":{},"sourceType":"module"}