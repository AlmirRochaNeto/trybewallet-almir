{"ast":null,"code":"import getCurrenciesFromApi from '../../helpers/currenciesAPI';\nexport const ADD_LOGIN_INFO = 'ADD_LOGIN_INFO';\nexport const RECEIVE_EXPENSE = 'RECEIVE_EXPENSE';\nexport const REQUEST_CURRENCY = 'REQUEST_CURRENCY';\nexport const RECEIVE_CURRENCY = 'RECEIVE_CURRENCY';\nexport const RECEIVE_CURRENCY_FAILURE = 'RECEIVE_CURRENCY_FAILURE';\n\nconst requestCurrency = () => ({\n  type: REQUEST_CURRENCY\n});\n\nconst receiveCurrency = currencies => ({\n  type: RECEIVE_CURRENCY,\n  currencies: Object.keys(currencies).filter(key => key !== 'USDT')\n});\n\nconst receiveExpense = currencies => ({\n  type: RECEIVE_EXPENSE,\n  expenses: currencies\n});\n\nconst receiveCurrencyFailure = errorMessage => ({\n  type: RECEIVE_CURRENCY_FAILURE,\n  error: errorMessage\n});\n\nexport const fetchCurrencies = () => async dispacth => {\n  dispacth(requestCurrency());\n\n  try {\n    const response = await getCurrenciesFromApi();\n    const sucessAction = receiveCurrency(response);\n    dispacth(sucessAction);\n  } catch (error) {\n    const failureAction = receiveCurrencyFailure(error);\n    dispacth(failureAction);\n  }\n};\nexport function login(payload) {\n  return {\n    type: ADD_LOGIN_INFO,\n    email: payload.email\n  };\n}\nexport const fetchCurrenciesFull = state => async dispacth => {\n  dispacth(requestCurrency());\n\n  try {\n    const response = await getCurrenciesFromApi();\n    const sucessAction = receiveExpense({ ...state,\n      ask: response[state.currency].ask,\n      exchangeRates: response\n    });\n    dispacth(sucessAction);\n  } catch (error) {\n    const failureAction = receiveCurrencyFailure(error);\n    dispacth(failureAction);\n  }\n};","map":{"version":3,"names":["getCurrenciesFromApi","ADD_LOGIN_INFO","RECEIVE_EXPENSE","REQUEST_CURRENCY","RECEIVE_CURRENCY","RECEIVE_CURRENCY_FAILURE","requestCurrency","type","receiveCurrency","currencies","Object","keys","filter","key","receiveExpense","expenses","receiveCurrencyFailure","errorMessage","error","fetchCurrencies","dispacth","response","sucessAction","failureAction","login","payload","email","fetchCurrenciesFull","state","ask","currency","exchangeRates"],"sources":["/home/almir/Documentos/Projects/15.6_trybewallet/sd-023-a-project-trybewallet/src/redux/actions/index.js"],"sourcesContent":["import getCurrenciesFromApi from '../../helpers/currenciesAPI';\n\nexport const ADD_LOGIN_INFO = 'ADD_LOGIN_INFO';\nexport const RECEIVE_EXPENSE = 'RECEIVE_EXPENSE';\nexport const REQUEST_CURRENCY = 'REQUEST_CURRENCY';\nexport const RECEIVE_CURRENCY = 'RECEIVE_CURRENCY';\nexport const RECEIVE_CURRENCY_FAILURE = 'RECEIVE_CURRENCY_FAILURE';\n\nconst requestCurrency = () => ({\n  type: REQUEST_CURRENCY,\n});\n\nconst receiveCurrency = (currencies) => ({\n  type: RECEIVE_CURRENCY,\n  currencies: Object.keys(currencies).filter((key) => key !== 'USDT'),\n});\n\nconst receiveExpense = (currencies) => ({\n  type: RECEIVE_EXPENSE,\n  expenses: currencies,\n});\n\nconst receiveCurrencyFailure = (errorMessage) => ({\n  type: RECEIVE_CURRENCY_FAILURE,\n  error: errorMessage,\n});\n\nexport const fetchCurrencies = () => async (dispacth) => {\n  dispacth(requestCurrency());\n  try {\n    const response = await getCurrenciesFromApi();\n    const sucessAction = receiveCurrency(response);\n    dispacth(sucessAction);\n  } catch (error) {\n    const failureAction = receiveCurrencyFailure(error);\n    dispacth(failureAction);\n  }\n};\n\nexport function login(payload) {\n  return {\n    type: ADD_LOGIN_INFO,\n    email: payload.email,\n  };\n}\n\nexport const fetchCurrenciesFull = (state) => async (dispacth) => {\n  dispacth(requestCurrency());\n  try {\n    const response = await getCurrenciesFromApi();\n    const sucessAction = receiveExpense({\n      ...state, ask: response[state.currency].ask, exchangeRates: response });\n    dispacth(sucessAction);\n  } catch (error) {\n    const failureAction = receiveCurrencyFailure(error);\n    dispacth(failureAction);\n  }\n};\n"],"mappings":"AAAA,OAAOA,oBAAP,MAAiC,6BAAjC;AAEA,OAAO,MAAMC,cAAc,GAAG,gBAAvB;AACP,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,wBAAwB,GAAG,0BAAjC;;AAEP,MAAMC,eAAe,GAAG,OAAO;EAC7BC,IAAI,EAAEJ;AADuB,CAAP,CAAxB;;AAIA,MAAMK,eAAe,GAAIC,UAAD,KAAiB;EACvCF,IAAI,EAAEH,gBADiC;EAEvCK,UAAU,EAAEC,MAAM,CAACC,IAAP,CAAYF,UAAZ,EAAwBG,MAAxB,CAAgCC,GAAD,IAASA,GAAG,KAAK,MAAhD;AAF2B,CAAjB,CAAxB;;AAKA,MAAMC,cAAc,GAAIL,UAAD,KAAiB;EACtCF,IAAI,EAAEL,eADgC;EAEtCa,QAAQ,EAAEN;AAF4B,CAAjB,CAAvB;;AAKA,MAAMO,sBAAsB,GAAIC,YAAD,KAAmB;EAChDV,IAAI,EAAEF,wBAD0C;EAEhDa,KAAK,EAAED;AAFyC,CAAnB,CAA/B;;AAKA,OAAO,MAAME,eAAe,GAAG,MAAM,MAAOC,QAAP,IAAoB;EACvDA,QAAQ,CAACd,eAAe,EAAhB,CAAR;;EACA,IAAI;IACF,MAAMe,QAAQ,GAAG,MAAMrB,oBAAoB,EAA3C;IACA,MAAMsB,YAAY,GAAGd,eAAe,CAACa,QAAD,CAApC;IACAD,QAAQ,CAACE,YAAD,CAAR;EACD,CAJD,CAIE,OAAOJ,KAAP,EAAc;IACd,MAAMK,aAAa,GAAGP,sBAAsB,CAACE,KAAD,CAA5C;IACAE,QAAQ,CAACG,aAAD,CAAR;EACD;AACF,CAVM;AAYP,OAAO,SAASC,KAAT,CAAeC,OAAf,EAAwB;EAC7B,OAAO;IACLlB,IAAI,EAAEN,cADD;IAELyB,KAAK,EAAED,OAAO,CAACC;EAFV,CAAP;AAID;AAED,OAAO,MAAMC,mBAAmB,GAAIC,KAAD,IAAW,MAAOR,QAAP,IAAoB;EAChEA,QAAQ,CAACd,eAAe,EAAhB,CAAR;;EACA,IAAI;IACF,MAAMe,QAAQ,GAAG,MAAMrB,oBAAoB,EAA3C;IACA,MAAMsB,YAAY,GAAGR,cAAc,CAAC,EAClC,GAAGc,KAD+B;MACxBC,GAAG,EAAER,QAAQ,CAACO,KAAK,CAACE,QAAP,CAAR,CAAyBD,GADN;MACWE,aAAa,EAAEV;IAD1B,CAAD,CAAnC;IAEAD,QAAQ,CAACE,YAAD,CAAR;EACD,CALD,CAKE,OAAOJ,KAAP,EAAc;IACd,MAAMK,aAAa,GAAGP,sBAAsB,CAACE,KAAD,CAA5C;IACAE,QAAQ,CAACG,aAAD,CAAR;EACD;AACF,CAXM"},"metadata":{},"sourceType":"module"}